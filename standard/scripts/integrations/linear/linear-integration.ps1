# MSP Linear Integration
# Generates Linear API queries and formatted messages for session tracking

#region Message Generation Functions

function New-LinearSessionComment {
    param(
        [Parameter(Mandatory)]
        [hashtable]$Session,
        
        [string]$IssueId = (Get-MSPConfig).linear.activeIssue
    )
    
    $updates = ($Session.updates | ForEach-Object {
        "- [$($_.time)] $($_.description) $(if($_.progress -ge 0) {"($($_.progress)%)"})"
    }) -join "`n"
    
    $decisions = ($Session.decisions | ForEach-Object {
        "- **Decision**: $($_.content)"
    }) -join "`n"
    
    $message = @"
## MSP Session Update - $(Get-Date -Format "yyyy-MM-dd HH:mm")

**Session ID**: $($Session.id)
**Duration**: $($Session.duration) hours
**Progress**: $($Session.startProgress)% → $($Session.endProgress)%

### Updates
$updates

$(if ($decisions) { "### Decisions`n$decisions" })

*Generated by MSP*
"@
    
    return @{
        issueId = $IssueId
        message = $message
        action = "Add this as a comment to Linear issue $IssueId"
    }
}

function New-LinearProgressComment {
    param(
        [Parameter(Mandatory)]
        [string]$IssueId,
        
        [Parameter(Mandatory)]
        [int]$Progress,
        
        [string]$Note = ""
    )
    
    $message = "**Progress Update**: $Progress%"
    if ($Note) {
        $message += "`n`n$Note"
    }
    $message += "`n`n*Updated by MSP at $(Get-Date -Format 'yyyy-MM-dd HH:mm')*"
    
    return @{
        issueId = $IssueId
        message = $message
        action = "Add progress comment to Linear issue $IssueId"
    }
}

#endregion

#region GraphQL Query Generation Functions

function New-LinearSessionIssueQuery {
    param(
        [Parameter(Mandatory)]
        [hashtable]$Session,
        
        [string]$TeamId = (Get-MSPConfig).linear.teamId,
        [string]$ProjectId = (Get-MSPConfig).linear.projectId
    )
    
    if (-not $TeamId) { $TeamId = $env:LINEAR_TEAM_ID }
    if (-not $ProjectId) { $ProjectId = $env:LINEAR_PROJECT_ID }
    
    $updates = ($Session.updates | ForEach-Object {
        "- [$($_.time)] $($_.description) $(if($_.progress) {"($($_.progress)%)"})"
    }) -join "`n"
    
    $query = @"
mutation CreateSessionIssue {
  issueCreate(input: {
    teamId: "$TeamId"
    projectId: "$ProjectId"
    title: "MSP Session - $(Get-Date -Format 'yyyy-MM-dd')"
    description: "## Session: $($Session.id)\n\n**Duration**: $($Session.duration) hours\n**Progress**: $($Session.startProgress)% → $($Session.endProgress)%\n\n### Updates\n$updates"
    priority: 3
    labelIds: ["msp-session"]
  }) {
    success
    issue {
      id
      identifier
      url
    }
  }
}
"@
    
    return @{
        query = $query
        operation = "Create Session Issue"
        variables = @{}
    }
}

function New-LinearProgressUpdateQuery {
    param(
        [Parameter(Mandatory)]
        [string]$IssueId,
        
        [Parameter(Mandatory)]
        [int]$Progress,
        
        [string]$Comment = ""
    )
    
    # Linear doesn't have native progress field, so we update description
    $query = @"
mutation UpdateIssueProgress {
  issueUpdate(
    id: "$IssueId",
    input: {
      description: "## Progress: $Progress%\n\n$Comment\n\n*Updated by MSP at $(Get-Date -Format 'yyyy-MM-dd HH:mm')*"
    }
  ) {
    success
    issue {
      id
      identifier
    }
  }
}
"@
    
    return @{
        query = $query
        operation = "Update Progress"
        variables = @{}
    }
}

function New-LinearCommentQuery {
    param(
        [Parameter(Mandatory)]
        [string]$IssueId,
        
        [Parameter(Mandatory)]
        [string]$Message,
        
        [int]$Progress = -1
    )
    
    $body = $Message
    if ($Progress -ge 0) {
        $body = "**Progress: $Progress%**`n`n$Message"
    }
    
    $query = @"
mutation AddSessionComment {
  commentCreate(input: {
    issueId: "$IssueId"
    body: "$body"
  }) {
    success
    comment {
      id
      createdAt
    }
  }
}
"@
    
    return @{
        query = $query
        operation = "Add Comment"
        variables = @{}
    }
}

function Get-LinearEpicQuery {
    param(
        [string]$ProjectId = (Get-MSPConfig).linear.projectId
    )
    
    if (-not $ProjectId) { $ProjectId = $env:LINEAR_PROJECT_ID }
    
    $query = @"
query GetProjectEpics {
  project(id: "$ProjectId") {
    id
    name
    issues(filter: { labels: { name: { eq: "epic" } } }) {
      nodes {
        id
        identifier
        title
        description
        status {
          name
        }
      }
    }
  }
}
"@
    
    return @{
        query = $query
        operation = "Get Project Epics"
        variables = @{}
    }
}

#endregion

#region Helper Functions

function Format-SessionForLinear {
    param(
        [Parameter(Mandatory)]
        [hashtable]$Session
    )
    
    $output = @{
        summary = "Session $($Session.id): $($Session.startProgress)% → $($Session.endProgress)%"
        duration = "$($Session.duration) hours"
        updates = $Session.updates.Count
        decisions = $Session.decisions.Count
    }
    
    return $output
}

#endregion

#region Instructions

function Get-LinearIntegrationInstructions {
    @"
## Linear Integration Instructions

MSP supports two modes of Linear integration:

### Mode 1: Formatted Messages (Default)
Generate formatted comments for manual posting or MCP tools:

\`\`\`powershell
# Generate session comment
$comment = New-LinearSessionComment -Session $currentSession

# Display for Claude
Write-Host "Please add this to Linear:"
Write-Host $comment.message
\`\`\`

### Mode 2: GraphQL Queries
Generate GraphQL queries for direct API usage:

\`\`\`powershell
# Create new issue
$issueQuery = New-LinearSessionIssueQuery -Session $currentSession
Write-Host $issueQuery.query

# Add comment with GraphQL
$commentQuery = New-LinearCommentQuery -IssueId "NOA-213" -Message "Update" -Progress 75
Write-Host $commentQuery.query
\`\`\`

### Using with MCP Tools
1. Generate the content using MSP functions
2. Use Linear MCP tools to execute:
   - linear:create_issue
   - linear:update_issue
   - linear:create_comment
   - linear:list_issues

### Configuration
Set in msp-config.json:
- linear.teamId: Your team UUID
- linear.projectId: Project UUID  
- linear.activeIssue: Current issue ID

Or use environment variables:
- LINEAR_TEAM_ID
- LINEAR_PROJECT_ID

### Example Workflow
\`\`\`powershell
# Start session
.\msp.ps1 start

# Work and update
.\msp.ps1 update "Implemented feature X" 25

# End session and generate Linear comment
.\msp.ps1 end
$comment = New-LinearSessionComment -Session (Get-LastSession)

# Ask Claude to post
Write-Host "Claude, please add this comment to Linear issue NOA-234:"
Write-Host $comment.message
\`\`\`
"@
}

#endregion

# Export all functions
Export-ModuleMember -Function *-Linear*, Format-SessionForLinear, Get-LinearIntegrationInstructions
