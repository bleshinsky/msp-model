# MSP Obsidian Integration
# Generates markdown content for Obsidian vault

function New-ObsidianDailyNote {
    param(
        [Parameter(Mandatory)]
        [hashtable]$Session,
        
        [string]$VaultPath = (Get-MSPConfig).obsidian.vaultPath
    )
    
    $date = Get-Date -Format "yyyy-MM-dd"
    $time = Get-Date -Format "HH:mm"
    
    $content = @"
# MSP Session - $date

## Session Info
- **Started**: $($Session.startTime)
- **Ended**: $(if ($Session.endTime) { $Session.endTime } else { "In Progress" })
- **Session ID**: $($Session.id)
- **Project**: [[$($Session.project)]]
- **Progress**: $($Session.startProgress)% â†’ $($Session.endProgress)%

## Updates
$(
    $Session.updates | ForEach-Object {
        "`n### [$($_.time)] $($_.description)"
        if ($_.progress -ge 0) {
            "- Progress: $($_.progress)%"
        }
        if ($_.tags) {
            "- Tags: #$($_.tags -join ' #')"
        }
    }
)

## Decisions
$(
    $Session.decisions | ForEach-Object {
        "- **$($_.content)**: $($_.rationale)"
    }
)

## Entities Created
$(
    $Session.entities | ForEach-Object {
        "- [[$($_.name)]] ($($_.type))"
    }
)

## Next Session
- [ ] Continue from $($Session.endProgress)%
- [ ] Review blockers
- [ ] Check Linear issue updates

---
*Generated by MSP at $time*
"@
    
    return @{
        path = Join-Path $VaultPath "Daily Notes\$date.md"
        content = $content
        action = "append"  # Append to existing daily note
    }
}

function New-ObsidianProjectNote {
    param(
        [Parameter(Mandatory)]
        [string]$ProjectName,
        
        [string]$Description = "",
        [string]$VaultPath = (Get-MSPConfig).obsidian.vaultPath
    )
    
    $content = @"
# $ProjectName

## Overview
$Description

## Project State
- **Progress**: 0%
- **Phase**: Planning
- **Started**: $(Get-Date -Format "yyyy-MM-dd")

## Architecture Decisions
- 

## Key Components
- 

## Sessions
- [[$(Get-Date -Format "yyyy-MM-dd")]] - Project setup

## Resources
- Linear Project: 
- GitHub Repository: 
- Documentation: 

#project #msp
"@
    
    return @{
        path = Join-Path $VaultPath "Projects\$ProjectName\$ProjectName.md"
        content = $content
        action = "create"
    }
}

function New-ObsidianDecisionRecord {
    param(
        [Parameter(Mandatory)]
        [string]$Title,
        
        [Parameter(Mandatory)]
        [string]$Decision,
        
        [string]$Context = "",
        [string]$Rationale = "",
        [string[]]$Alternatives = @(),
        [string]$VaultPath = (Get-MSPConfig).obsidian.vaultPath
    )
    
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm"
    $filename = "ADR-$(Get-Date -Format 'yyyyMMdd')-$($Title -replace '[^\w\s-]', '' -replace '\s+', '-')"
    
    $content = @"
# $Title

**Date**: $timestamp
**Status**: Accepted

## Context
$Context

## Decision
$Decision

## Rationale
$Rationale

## Alternatives Considered
$(
    if ($Alternatives.Count -gt 0) {
        $Alternatives | ForEach-Object { "- $_" }
    } else {
        "- None"
    }
)

## Consequences
- 

## References
- Session: [[$(Get-Date -Format "yyyy-MM-dd")]]

#decision #architecture
"@
    
    return @{
        path = Join-Path $VaultPath "Decisions\$filename.md"
        content = $content
        action = "create"
    }
}

function Update-ObsidianSessionNote {
    param(
        [Parameter(Mandatory)]
        [string]$Update,
        
        [int]$Progress = -1,
        [string]$VaultPath = (Get-MSPConfig).obsidian.vaultPath
    )
    
    $date = Get-Date -Format "yyyy-MM-dd"
    $time = Get-Date -Format "HH:mm"
    
    $content = "`n### [$time] $Update"
    if ($Progress -ge 0) {
        $content += "`n- Progress: $Progress%"
    }
    
    return @{
        path = Join-Path $VaultPath "Daily Notes\$date.md"
        content = $content
        action = "append"
    }
}

# Export functions
Export-ModuleMember -Function *-Obsidian*
